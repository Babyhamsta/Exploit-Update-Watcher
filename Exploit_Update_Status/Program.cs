using System;
using System.Media;
using System.Net;
using System.Threading;

namespace Exploit_Update_Status
{
    class Program
    {

        public static WebClient client = new WebClient(); // no need to create a new client every loop

        // Lord forgive me for this sloppy coding c;
        // HamstaGang was here, hope you enjoy!
        
        /* Last updated 02/23/2022
           Just wanted to come back and clean up some of the awlful coding / formatting.
           If you haven't checked out the new project which is fully web based go look at it: https://WhatExploitsAre.Online
           It even has a public API where you can pull this data. */
        
        static void Main(string[] args)
        {
            Console.Title = "[HamstaGang] | Exploit Update Status";
            MainMenu();
        }
        
        // Main Selection Menu
        private static bool MainMenu()
        {
            // This could be consolidated into one line with \n but I like it's readability.
            Console.Clear();
            Console.WriteLine("Please choose an exploit to watch for updates on:");
            Console.WriteLine("1) Synapse");
            Console.WriteLine("2) Script-Ware");
            Console.WriteLine("3) KRNL");
            Console.WriteLine("4) All of the above");
            Console.Write("\r\nPlease select an option: ");

            switch (Console.ReadLine())
            {
                case "1":
                    Watch_Exploit("https://synapse.to/whitelist/version");
                    return true;
                case "2":
                    Watch_Exploit("https://script-ware.com/api/version/core");
                    return true;
                case "3":
                    Watch_Exploit("https://cdn.krnl.ca/version.txt");
                    return true;
                case "4":
                    ALL_Watch();
                    return true;
                default:
                    return true;
            }
        }
        
        // Play Windows beep sound
        private static void Loop_Beep()
        {
            while (true)
            {
                SystemSounds.Beep.Play();
                Thread.Sleep(1000);
            }
        }
        
        // Single Exploit Watch
        private static void Watch_Exploit(string Exploit_URL)
        {
            // Our version vars
            string Curr_Version = "";
            string First_Check_Version = "";
            string VersionReturn = client.DownloadString(Exploit_URL);

            // Setup the console
            Console.Clear();
            Console.WriteLine("Current version: ");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(VersionReturn);
            Console.ResetColor();
            
            // Setup our first version pull
            First_Check_Version = VersionReturn;
            Curr_Version = VersionReturn;
            
            // Loop until update is noticed
            Console.WriteLine("\nChecking for updates every 30 seconds..");
            while (Curr_Version == First_Check_Version)
            {
                Console.Title = "[HamstaGang] | Exploit Update Status | Last check: " + DateTime.Now.ToString("h:mm:ss tt");
                Curr_Version = client.DownloadString(Exploit_URL);
                Thread.Sleep(60000);
            }
            
            // Update Console and Notify User via Beep
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("Exploit has updated! Feel free to now use it!");
            Loop_Beep();
            Console.ReadKey(true);
        }
        
        // Watch all
        private static void ALL_Watch()
        {
            // KRNL Version
            string Curr_Version_KRNL = "";
            string First_Check_Version_KRNL = "";
            
            // Synapse Version
            string Curr_Version_Synapse = "";
            string First_Check_Version_Synapse = "";
            
            // Script-Ware Version
            string Curr_Version_Script = "";
            string First_Check_Version_Script = "";

            // Setup console and update with first pull \\
            
            // KRNL
            Console.Clear();
            string VersionReturn_KRNL = client.DownloadString("https://cdn.krnl.ca/version.txt");
            Console.WriteLine("Current KRNL version: ");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(VersionReturn_KRNL);
            Console.ResetColor();
            Console.WriteLine("----------------------------------------------------------------------------------------");
            First_Check_Version_KRNL = VersionReturn_KRNL;
            Curr_Version_KRNL = VersionReturn_KRNL;
            
            // Synapse
            string VersionReturn_Synapse = client.DownloadString("https://synapse.to/whitelist/version");
            Console.WriteLine("Current Synapse version: ");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(VersionReturn_Synapse);
            Console.ResetColor();
            Console.WriteLine("----------------------------------------------------------------------------------------");
            First_Check_Version_Synapse = VersionReturn_Synapse;
            Curr_Version_Synapse = VersionReturn_Synapse;

            // Script-Ware
            string VersionReturn_Scriptware = client.DownloadString("https://script-ware.com/api/version/core");
            Console.WriteLine("Current Script-Ware version: ");
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine(VersionReturn_Scriptware);
            Console.ResetColor();
            Console.WriteLine("----------------------------------------------------------------------------------------");
            First_Check_Version_Script = VersionReturn_Scriptware;
            Curr_Version_Script = VersionReturn_Scriptware;

            // Loop until all are updated
            Console.WriteLine("\nChecking for updates every 30 seconds..");
            while (true)
            {
                Console.Title = "[HamstaGang] | Exploit Update Status | Last check: " + DateTime.Now.ToString("h:mm:ss tt");

                Curr_Version_KRNL = client.DownloadString("https://cdn.krnl.ca/version.txt");
                Curr_Version_Synapse = client.DownloadString("https://synapse.to/whitelist/version");
                Curr_Version_Script = client.DownloadString("https://script-ware.com/api/version/core");

                // We do multiple If statements because we aren't wanting to do elseifs incase one is true
                if (Curr_Version_KRNL != First_Check_Version_KRNL)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("KRNL has updated!");
                    Console.ResetColor();
                    SystemSounds.Beep.Play(); // Play beep / windows sound
                }

                if (Curr_Version_Synapse != First_Check_Version_Synapse)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Synapse has updated!");
                    Console.ResetColor();
                    SystemSounds.Beep.Play(); // Play beep / windows sound
                }

                if (Curr_Version_Script != First_Check_Version_Script)
                {
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine("Script-Ware has updated!");
                    Console.ResetColor();
                    SystemSounds.Beep.Play(); // Play beep / windows sound
                }

                // Sleep for 60 seconds
                Thread.Sleep(60000);
            }
        }
    }
}
